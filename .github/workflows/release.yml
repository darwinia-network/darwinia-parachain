name: Release

on:
  push:
    tags:
      - "v*"

env:
  RUST_TOOLCHAIN: nightly

jobs:
  ##
  # Build page
  ##
  build-package:
    name: Build package
    runs-on: ubuntu-latest
    container:
      image: ubuntu:16.04
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          apt update -y
          apt install --no-install-recommends -y \
            curl ca-certificates make gcc g++ clang-4.0 pkg-config

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Collect shared
        run: |
          mkdir -p shared/crab-parachain-runtime
          mkdir -p shared/darwinia-parachain-runtime
          tar cjSf shared/darwinia-collator-x86_64-linux-gnu.tar.bz2 \
            -C target/x86_64-unknown-linux-gnu/release \
           darwinia-collator

          mv target/x86_64-unknown-linux-gnu/release/wbuild/crab-parachain-runtime/*.wasm shared/crab-parachain-runtime
          mv target/x86_64-unknown-linux-gnu/release/wbuild/darwinia-parachain-runtime/*.wasm shared/darwinia-parachain-runtime

      - name: Upload shared
        uses: actions/upload-artifact@v2
        with:
          name: darwinia-artifact
          path: shared

  ##
  # Generate subwasm info
  ##
  build-subwasm:
    name: Generate subwasm info
    runs-on: ubuntu-latest
    needs: [build-package]
    strategy:
      matrix:
        runtime: [crab-parachain-runtime, darwinia-parachain-runtime]
      max-parallel: 1
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: darwinia-artifact
          path: shared

      - name: Install subwasm
        env:
          # Currently, Same with srtool version v0.9.18
          # https://github.com/paritytech/srtool/blob/v0.9.18/Dockerfile#L19
          SUBWASM_VERSION: 0.15.0
        run: |
          curl -L https://github.com/chevdor/subwasm/releases/download/v${SUBWASM_VERSION}/subwasm_linux_amd64_v${SUBWASM_VERSION}.deb \
            --output subwasm.deb && \
            sudo dpkg -i subwasm.deb && \
            subwasm --version
      - name: Generate subwasm info for ${{ matrix.runtime }}
        run: |
          WASM=shared/${{ matrix.runtime }}/*.compact.wasm
          Z_WASM=shared/${{ matrix.runtime }}/*.compact.compressed.wasm
          echo '${{ matrix.runtime }} compact subwasm info'
          subwasm -j info $WASM | tee shared/${{ matrix.runtime }}/${{ matrix.runtime }}.compact.json
          echo '${{ matrix.runtime }} compressed compact subwasm info'
          subwasm -j info $Z_WASM | tee shared/${{ matrix.runtime }}/${{ matrix.runtime }}.compact.compressed.json
      - name: Upload shared
        uses: actions/upload-artifact@v2.2.4
        with:
          name: darwinia-artifact
          path: shared

  ##
  # Build docker image
  ##
  build-docker-image:
    name: Build image
    runs-on: ubuntu-latest
    needs: [build-package]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: darwinia-artifact
          path: shared

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.QUAY_IO_BOT_USERNAME }}
          password: ${{ secrets.QUAY_IO_BOT_PASSWORD }}
          registry: quay.io

      - uses: olegtarasov/get-tag@v2.1
        id: tag-name
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      - name: Extract package
        run: |
          mkdir -p dist
          tar -xvf shared/darwinia-collator-x86_64-linux-gnu.tar.bz2 -C dist/

      - name: Build and publish docker image
        run: |
          IMAGE_NAME=darwinia-collator
          IMAGE_PREFIX=quay.io/darwinia-network
          IMAGE_PUSH_NAME_TAG=${IMAGE_PREFIX}/${IMAGE_NAME}:${GIT_TAG_NAME}
          IMAGE_PUSH_NAME_SHA=${IMAGE_PREFIX}/${IMAGE_NAME}:sha-${SHA}
          docker build \
            -t ${IMAGE_PUSH_NAME_TAG} \
            -t ${IMAGE_PUSH_NAME_SHA} \
            -f .maintain/docker/Dockerfile \
            .
          docker push ${IMAGE_PUSH_NAME_TAG}
          docker push ${IMAGE_PUSH_NAME_SHA}

  publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs: [build-subwasm, build-docker-image]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: darwinia-artifact
          path: shared

      - name: Prepare deploy folder
        run: |
          mkdir -p deploy

          mv shared/darwinia-collator-x86_64-linux-gnu.tar.bz2 deploy/

          mv shared/crab-parachain-runtime/*.compact.wasm deploy/
          mv shared/crab-parachain-runtime/*.compact.json deploy/
          mv shared/darwinia-parachain-runtime/*.compact.wasm deploy/
          mv shared/darwinia-parachain-runtime/*.compact.json deploy/

      - name: Hash file
        run: |
          (cd deploy && sha256sum * | tee sha256sums.txt)

      - uses: olegtarasov/get-tag@v2.1
        id: tag-name
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      - name: Generate template data
        run: |
          PROPOSAL_CRAB_PARACHAIN_COMPACT=$(cat deploy/crab-parachain-runtime.compact.json | jq -r .proposal_hash)
          PROPOSAL_DARWINIA_PARACHAIN_COMPACT=$(cat deploy/darwinia-parachain-runtime.compact.json | jq -r .proposal_hash)

          echo 'Template data:'
          jq -n \
            --arg crab_parachain_proposal_compact "$PROPOSAL_CRAB_PARACHAIN_COMPACT" \
            --arg darwinia_parachain_proposal_compact "$PROPOSAL_DARWINIA_PARACHAIN_COMPACT" \
            --arg tag "$GIT_TAG_NAME" \
            --arg sha "$SHA" \
            '{
              crab_parachain_proposal_compact: $crab_parachain_proposal_compact,
              darwinia_parachain_proposal_compact: $darwinia_parachain_proposal_compact,
              tag: $tag,
              sha: $sha
            }' | tee template_data.json

      - name: Render release page
        uses: jayamanikharyono/jinja-action@v0.1
        with:
          datafile: template_data.json
          path: .github/release-template.md

      - name: Publish github release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            deploy/*
          body_path: ".github/release-template.md"
          token: ${{ secrets.GITHUB_TOKEN }}

  clean-artifacts:
    name: Clean artifacts
    runs-on: ubuntu-latest
    needs: [publish-release]
    if: always()
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: darwinia-artifact
