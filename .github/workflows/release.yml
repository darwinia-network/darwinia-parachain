name: Release

on:
  push:
    tags:
      - "v*"

env:
  RUST_TOOLCHAIN: nightly

jobs:
  build-package:
    name: Build package
    runs-on: ubuntu-latest
    container:
      image: ubuntu:16.04
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          apt update -y
          apt install --no-install-recommends -y \
            curl ca-certificates make gcc g++ clang-4.0 pkg-config zip

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Collect shared
        run: |
          mkdir -p shared
          zip -jr \
            shared/darwinia-collator-linux-x86_64.zip \
            target/x86_64-unknown-linux-gnu/release/darwinia-collator

      - name: Upload shared
        uses: actions/upload-artifact@v2
        with:
          name: bridger-artifact
          path: shared

  build-docker-image:
    name: Build image
    runs-on: ubuntu-latest
    needs: [ build-package ]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: bridger-artifact
          path: shared

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.QUAY_IO_BOT_USERNAME }}
          password: ${{ secrets.QUAY_IO_BOT_PASSWORD }}
          registry: quay.io

      - uses: olegtarasov/get-tag@v2.1
        id: tag-name
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      - name: Extract package
        run: |
          mkdir -p dist
          unzip shared/darwinia-collator-linux-x86_64.zip -d dist/

      - name: Build and publish docker image
        run: |
          IMAGE_NAME=darwinia-collator
          IMAGE_PREFIX=quay.io/darwinia-network
          IMAGE_PUSH_NAME_TAG=${IMAGE_PREFIX}/${IMAGE_NAME}:${GIT_TAG_NAME}
          IMAGE_PUSH_NAME_SHA=${IMAGE_PREFIX}/${IMAGE_NAME}:sha-${SHA}
          docker build \
            -t ${IMAGE_PUSH_NAME_TAG} \
            -t ${IMAGE_PUSH_NAME_SHA} \
            -f .maintain/docker/Dockerfile \
            .
          docker push ${IMAGE_PUSH_NAME_TAG}
          docker push ${IMAGE_PUSH_NAME_SHA}


  publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs: [ build-docker-image ]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: bridger-artifact
          path: shared

      - name: Hash file
        run: |
          (cd shared && sha256sum * | tee sha256sums.txt)

      - uses: olegtarasov/get-tag@v2.1
        id: tag-name
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      - name: Generate template data
        run: |
          echo 'Template data:'
          jq -n \
            --arg tag "$GIT_TAG_NAME" \
            --arg sha "$SHA" \
            '{
              tag: $tag,
              sha: $sha
            }' | tee template_data.json

      - name: Render release page
        uses: jayamanikharyono/jinja-action@v0.1
        with:
          datafile: template_data.json
          path: .maintain/release-template.md

      - name: Publish github release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            shared/*
          body_path: ".maintain/release-template.md"
          token: ${{ secrets.GITHUB_TOKEN }}

  clean-artifacts:
    name: Clean artifacts
    runs-on: ubuntu-latest
    needs: [ build-docker-image ]
    if: always()
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: bridger-artifact
