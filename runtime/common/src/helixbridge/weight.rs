// This file is part of Darwinia.
//
// Copyright (C) 2018-2022 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `dp_common_runtime`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-20, STEPS: `100`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("pangolin-parachain-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/darwinia-parachain
// benchmark
// pallet
// --chain
// pangolin-parachain-dev
// --pallet
// dp_common_runtime
// --wasm-execution
// compiled
// --execution
// wasm
// --extrinsic=*
// --steps
// 100
// --repeat
// 10
// --heap-pages=4096
// --header
// ./.maintain/lincense-header
// --output
// ./runtime/common/src/helixbridge/weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
       fn issue_from_remote() -> Weight;
       fn handle_issuing_failure_from_remote() -> Weight;
       fn handle_issuing_failure_local() -> Weight;
       fn burn_and_remote_unlock() -> Weight;
       fn remote_unlock_failure() -> Weight;
       fn set_remote_backing_account() -> Weight;
       fn set_secure_limited_period() -> Weight;
       fn set_security_limitation_ring_amount() -> Weight;
}

/// Weight functions for `dp_common_runtime`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: FromPangolinIssuing SecureLimitedRingAmount (r:1 w:0)
	// Storage: FromPangolinIssuing SecureLimitedPeriod (r:1 w:0)
	// Storage: FromPangolinIssuing ReceivedNonces (r:1 w:1)
	// Storage: BridgePangolinMessages InboundLanes (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn issue_from_remote() -> Weight {
		(239_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: FromPangolinIssuing TransactionInfos (r:1 w:1)
	// Storage: FromPangolinIssuing ReceivedNonces (r:1 w:1)
	// Storage: BridgePangolinMessages InboundLanes (r:1 w:0)
	fn handle_issuing_failure_from_remote() -> Weight {
		(152_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: FromPangolinIssuing MinReservedBurnNonce (r:1 w:0)
	// Storage: FromPangolinIssuing TransactionInfos (r:1 w:1)
	fn handle_issuing_failure_local() -> Weight {
		(118_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:3 w:3)
	// Storage: FromPangolinIssuing ReceivedNonces (r:1 w:0)
	// Storage: FromPangolinIssuing MinReservedBurnNonce (r:1 w:0)
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: BridgePangolinMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgePangolinMessages OutboundLanes (r:1 w:1)
	// Storage: PangolinFeeMarket AssignedRelayers (r:1 w:0)
	// Storage: FromPangolinIssuing TransactionInfos (r:1 w:1)
	// Storage: BridgePangolinMessages OutboundMessages (r:0 w:1)
	fn burn_and_remote_unlock() -> Weight {
		(578_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: System Account (r:3 w:3)
	// Storage: FromPangolinIssuing ReceivedNonces (r:1 w:0)
	// Storage: BridgePangolinMessages InboundLanes (r:1 w:0)
	// Storage: FromPangolinIssuing MinReservedBurnNonce (r:1 w:0)
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: BridgePangolinMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgePangolinMessages OutboundLanes (r:1 w:1)
	// Storage: PangolinFeeMarket AssignedRelayers (r:1 w:0)
	// Storage: BridgePangolinMessages OutboundMessages (r:0 w:1)
	fn remote_unlock_failure() -> Weight {
		(511_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:0 w:1)
	fn set_remote_backing_account() -> Weight {
		(72_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: FromPangolinIssuing SecureLimitedPeriod (r:0 w:1)
	fn set_secure_limited_period() -> Weight {
		(24_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: FromPangolinIssuing SecureLimitedRingAmount (r:1 w:1)
	fn set_security_limitation_ring_amount() -> Weight {
		(34_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

impl WeightInfo for () {
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: FromPangolinIssuing SecureLimitedRingAmount (r:1 w:0)
	// Storage: FromPangolinIssuing SecureLimitedPeriod (r:1 w:0)
	// Storage: FromPangolinIssuing ReceivedNonces (r:1 w:1)
	// Storage: BridgePangolinMessages InboundLanes (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn issue_from_remote() -> Weight {
		(239_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: FromPangolinIssuing TransactionInfos (r:1 w:1)
	// Storage: FromPangolinIssuing ReceivedNonces (r:1 w:1)
	// Storage: BridgePangolinMessages InboundLanes (r:1 w:0)
	fn handle_issuing_failure_from_remote() -> Weight {
		(152_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: FromPangolinIssuing MinReservedBurnNonce (r:1 w:0)
	// Storage: FromPangolinIssuing TransactionInfos (r:1 w:1)
	fn handle_issuing_failure_local() -> Weight {
		(118_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:3 w:3)
	// Storage: FromPangolinIssuing ReceivedNonces (r:1 w:0)
	// Storage: FromPangolinIssuing MinReservedBurnNonce (r:1 w:0)
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: BridgePangolinMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgePangolinMessages OutboundLanes (r:1 w:1)
	// Storage: PangolinFeeMarket AssignedRelayers (r:1 w:0)
	// Storage: FromPangolinIssuing TransactionInfos (r:1 w:1)
	// Storage: BridgePangolinMessages OutboundMessages (r:0 w:1)
	fn burn_and_remote_unlock() -> Weight {
		(578_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: System Account (r:3 w:3)
	// Storage: FromPangolinIssuing ReceivedNonces (r:1 w:0)
	// Storage: BridgePangolinMessages InboundLanes (r:1 w:0)
	// Storage: FromPangolinIssuing MinReservedBurnNonce (r:1 w:0)
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: BridgePangolinMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgePangolinMessages OutboundLanes (r:1 w:1)
	// Storage: PangolinFeeMarket AssignedRelayers (r:1 w:0)
	// Storage: BridgePangolinMessages OutboundMessages (r:0 w:1)
	fn remote_unlock_failure() -> Weight {
		(511_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: FromPangolinIssuing RemoteBackingAccount (r:0 w:1)
	fn set_remote_backing_account() -> Weight {
		(72_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: FromPangolinIssuing SecureLimitedPeriod (r:0 w:1)
	fn set_secure_limited_period() -> Weight {
		(24_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: FromPangolinIssuing SecureLimitedRingAmount (r:1 w:1)
	fn set_security_limitation_ring_amount() -> Weight {
		(34_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
